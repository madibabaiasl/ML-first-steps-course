#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 24 12:42:02 2022

@author: samer
"""
import numpy as np
import matplotlib.pyplot as plt

def hypo(Theta, X):
    f = np.matmul(Theta, X)
    return f

def deriv(Theta, X, Y):
    m = X.shape[1] #--> Number of training examples
    dJ = (1/m) * np.matmul((hypo(Theta, X) - Y), X.T)
    return dJ

def cost(Theta, X):
    m = X.shape[1] #--> Number of training examples
    J = (1 / (2*m)) * np.matmul(hypo(Theta, X) - Y, (hypo(Theta, X) - Y).T)
    return J

# Generate actual depth data (z) (Y of my algorithm)
z_actual = np.arange(1, 2.01, 0.01)
z_actual = z_actual.reshape(z_actual.shape[0], 1).T

# Generate faulty camera readings (X of my algorithm)
z_read = np.exp(z_actual)

# Regression variables
X = np.ones(z_read.shape)
X = np.append(X, np.power(z_read, 1/2), axis = 0)
X = np.append(X, np.power(z_read, 1/3), axis = 0) 
X = np.append(X, np.power(z_read, 1/4), axis = 0) 
X = np.append(X, np.power(z_read, 1/5), axis = 0)
X = np.append(X, np.log(z_read), axis = 0) #--> Regression input
Y = z_actual
Theta = np.array([[0.2, 0.3, 0.4, 0.5, 0.21, 0.33]]) #--> Parameter vector

# Learning
alpha = 0.05
max_iter = 3000
print('original cost is', cost(Theta, X))
for i in range(max_iter):
    Theta = Theta - alpha * deriv(Theta, X, Y)
print('optimized cost is', cost(Theta, X))

# Result plot
plt.plot(z_read[0, :], z_actual[0, :], label = "ideal")
plt.plot(z_read[0, :], hypo(Theta, X)[0, :], label = "corrected")
plt.xlabel('faulty camera readings (m)')
plt.ylabel('output (m)')
plt.show()
